#! /usr/bin/env ruby

$:.push(File.expand_path(File.join(%w(.. lib)), __dir__))

require 'gelauto'
require 'gelauto/version'
require 'gli'

module Gelauto
  module CLI
    def self.print_global_help
      puts "\nExample Usage: gelauto [ --silent ] run [ --annotate ] [ --rbi ] $(find . -name '*.rb') -- bundle exec rspec spec/\n\n"
      commands[:help].execute({}, {}, [])
    end

    extend GLI::App

    program_desc 'Automatically annotate methods with Sorbet type signatures.'

    version Gelauto::VERSION

    subcommand_option_handling :normal
    default_command :run

    desc 'Silence log output.'
    default_value false
    switch [:s, :silent]

    desc 'Run the given command with Gelauto and optionally annotate files.'
    command :run do |c|
      c.desc 'Write discovered type signatures into Ruby files.'
      c.default_value false
      c.switch [:a, :annotate]

      c.desc 'Print type signatures to STDOUT in RBI format. Ignores --silent.'
      c.flag [:r, :rbi], type: String

      c.desc 'Change into the given directory before running the command.'
      c.default_value '.'
      c.flag [:d, :dir], type: String

      c.action do |global_options, options, args|
        if options[:rbi] && options[:rbi] != '-'
          dir = File.dirname(options[:rbi])

          unless File.exist?(dir)
            puts "--rbi: #{dir} does not exist :("
          end
        end

        unless File.exist?(options[:dir])
          puts "--dir: #{options[:dir]} does not exist :("
        end

        paths, _, cmd = args.chunk_while { |arg1, arg2| arg1 != '--' && arg2 != '--' }.to_a
        Gelauto.paths += paths

        exe = Gelauto::CLIUtils.which(cmd[0]) || cmd[0]
        cmd.shift

        old_argv = ARGV.dup
        old_path = $:.dup

        begin
          Gelauto.setup
          ARGV.replace(cmd)
          Dir.chdir(options[:dir])
          load exe
        ensure
          Gelauto.teardown
          ARGV.replace(old_argv)
          $:.replace(old_path)

          if options[:annotate]
            Gelauto.each_absolute_path do |path|
              Gelauto.annotate_file(path)
              Gelauto::Logger.info("Annotated #{path}")
            end
          end

          if options[:rbi]
            rbi_str = Gelauto::Rbi.new(Gelauto.method_index).to_s

            if options[:rbi] == '-'
              puts rbi_str
            else
              File.write(options[:rbi], rbi_str)
            end
          end
        end
      end
    end

    pre do |global_options, _command, _options, _args|
      if global_options[:silent]
        Gelauto.logger = Gelauto::NullLogger.new
      end

      true
    end
  end
end

if ARGV.empty?
  Gelauto::CLI.print_global_help
  exit 1
end

exit Gelauto::CLI.run(ARGV)
